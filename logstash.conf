input {
  kafka {
    bootstrap_servers => "kafka:9092"
    topics => [
  
      "hoteripcdc.local_hoterip.hotels", 
      "hoteripcdc.local_hoterip.cities", 
      "hoteripcdc.local_hoterip.city_texts", 
      "hoteripcdc.local_hoterip.countries", 
      "hoteripcdc.local_hoterip.country_texts", 
      "hoteripcdc.local_hoterip.districts", 
      "hoteripcdc.local_hoterip.district_texts", 
      "hoteripcdc.local_hoterip.currencies", 
      "hoteripcdc.local_hoterip.hotel_types", 
      "hoteripcdc.local_hoterip.hotel_photos", 
      "hoteripcdc.local_hoterip.hotel_facilities", 
      "hoteripcdc.local_hoterip.hotel_texts", 
      "hoteripcdc.local_hoterip.rooms", 
      "hoteripcdc.local_hoterip.bed_types", 
      "hoteripcdc.local_hoterip.room_texts", 
      "hoteripcdc.local_hoterip.room_capacities", 
      "hoteripcdc.local_hoterip.room_facilities", 
      "hoteripcdc.local_hoterip.hotel_no_departures", 
      "hoteripcdc.local_hoterip.hotel_no_arrivals", 
      "hoteripcdc.local_hoterip.campaigns_stop_promotions", 
      "hoteripcdc.local_hoterip.surcharges", 
      "hoteripcdc.local_hoterip.campaigns", 
      "hoteripcdc.local_hoterip.campaigns_benefits", 
      "hoteripcdc.local_hoterip.campaigns_rooms", 
      "hoteripcdc.local_hoterip.cancellations", 
      "hoteripcdc.local_hoterip.campaigns_cancellations", 
      "hoteripcdc.local_hoterip.users", 
      "hoteripcdc.local_hoterip.agent_datas", 
      "hoteripcdc.local_hoterip.agent_hotels", 
      "hoteripcdc.local_hoterip.agent_currencies", 
      "hoteripcdc.local_hoterip.agent_country", 
      "hoteripcdc.local_hoterip.items", 
      "hoteripcdc.local_hoterip.itemb2bs"  
      "hoteripcdc.local_hoterip.cancellation_rules"
    ]
    group_id => "logstash-group"
    codec => "json"
    auto_offset_reset => "latest"
    # auto_offset_reset => "earliest" 
  }
}

filter { 
  # Convert integer values to booleans where appropriate
  mutate {
    convert => {
      "[payload][after][is_blackout]" => "boolean"
      "[payload][after][is_campaign_blackout]" => "boolean"
      "[payload][after][is_campaign_prices]" => "boolean"
    }
  }


if [source][table] == "items" {
    mutate {
      replace => { "[source][table]" => "cdc_items" }
    }
  }

  if [payload][after][date] {
    ruby {
      code => "
        require 'time'
        event.set('[payload][after][date]', Time.at(event.get('[payload][after][date]').to_i * 86400).utc.strftime('%Y-%m-%d'))
      "
    }
  }
  if [payload][after][booking_start_date] {
    ruby {
      code => "
        require 'time'
        event.set('[payload][after][booking_start_date]', Time.at(event.get('[payload][after][booking_start_date]').to_i * 86400).utc.strftime('%Y-%m-%d'))
      "
    }
  }
  if [payload][after][booking_end_date] {
    ruby {
      code => "
        require 'time'
        event.set('[payload][after][booking_end_date]', Time.at(event.get('[payload][after][booking_end_date]').to_i * 86400).utc.strftime('%Y-%m-%d'))
      "
    }
  }
  if [payload][after][stay_start_date] {
    ruby {
      code => "
        require 'time'
        event.set('[payload][after][stay_start_date]', Time.at(event.get('[payload][after][stay_start_date]').to_i * 86400).utc.strftime('%Y-%m-%d'))
      "
    }
  }
  if [payload][after][stay_end_date] {
    ruby {
      code => "
        require 'time'
        event.set('[payload][after][stay_end_date]', Time.at(event.get('[payload][after][stay_end_date]').to_i * 86400).utc.strftime('%Y-%m-%d'))
      "
    }
  }

  if [payload][after][end_date] {
    ruby {
      code => "
        require 'time'
        event.set('[payload][after][end_date]', Time.at(event.get('[payload][after][end_date]').to_i * 86400).utc.strftime('%Y-%m-%d'))
      "
    }
  }

    if [payload][after][start_date] {
    ruby {
      code => "
        require 'time'
        event.set('[payload][after][start_date]', Time.at(event.get('[payload][after][start_date]').to_i * 86400).utc.strftime('%Y-%m-%d'))
      "
    }
  }

  # Replace empty strings with null where applicable (optional)
  # gsub => [
  #   "[payload][after][application_control]", "^$", "null"
  # ]
}

output {
  http {
    url => "https://x9knqc3t5c.execute-api.ap-southeast-1.amazonaws.com/cdc"  
    http_method => "post"
    format => "json"
    headers => {
      "Content-Type" => "application/json"
    }
    retry_failed => false
    automatic_retries => 3
    mapping => {
      "payload" => "%{[payload]}"  
    }
  }

  stdout {
    codec => rubydebug
  }
}
